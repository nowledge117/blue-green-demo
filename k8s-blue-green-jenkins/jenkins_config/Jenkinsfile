pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            namespace 'blue-green-demo'
            yamlFile 'jenkins_config/pod-template.yaml'
        }
    }

    environment {
        IMAGE_TAG = "blue-green-app:${env.GIT_COMMIT.take(7)}"
        K8S_NAMESPACE = "blue-green-demo"
        AWS_ACCOUNT_ID = credentials('812073017047')
        AWS_REGION = credentials('ap-south-1')
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        sh 'docker build -t ${IMAGE_TAG} ./app'
                    }
                }
            }
        }

        stage('Determine Deployment Color') {
            steps {
                script {
                    def blueDeploymentExists = sh(
                        script: "kubectl get deployment node-app-blue -n ${K8S_NAMESPACE} --ignore-not-found -o name",
                        returnStatus: true
                    ) == 0

                    if (!blueDeploymentExists) {
                        env.DEPLOY_COLOR = "blue"
                        env.ACTIVE_COLOR = "blue"
                        env.PREVIEW_COLOR = "green"
                    } else {
                        env.DEPLOY_COLOR = "green"
                        env.ACTIVE_COLOR = "blue"
                        env.PREVIEW_COLOR = "green"
                    }
                    echo "Deploying new version to: ${env.DEPLOY_COLOR}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh "sed -i 's|image: blue-green-app:latest|image: ${IMAGE_TAG}|g' k8s/deployment-${env.DEPLOY_COLOR}.yaml"
                    sh "kubectl apply -f k8s/deployment-${env.DEPLOY_COLOR}.yaml -n ${K8S_NAMESPACE}"
                    sh "kubectl apply -f k8s/service-active.yaml -n ${K8S_NAMESPACE}"
                    sh "kubectl apply -f k8s/service-preview.yaml -n ${K8S_NAMESPACE}"
                }
            }
        }

        stage('Manual Approval: Verify Green') {
            when {
                expression { env.DEPLOY_COLOR == 'green' }
            }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    input message: "New version deployed to GREEN. Please verify on the 'preview-service' URL. Proceed to switch traffic?"
                }
            }
        }

        stage('Switch Traffic to Green') {
            when {
                expression { env.DEPLOY_COLOR == 'green' }
            }
            steps {
                script {
                    echo "Switching active-service to point to GREEN deployment"
                    sh "kubectl patch service active-service -n ${K8S_NAMESPACE} -p '{\"spec\": {\"selector\": {\"app\": \"node-app-green\"}}}'"
                }
            }
        }

        stage('Cleanup Old Blue Deployment') {
            when {
                expression { env.DEPLOY_COLOR == 'green' }
            }
            steps {
                script {
                    echo "Cleaning up old BLUE deployment"
                    sh "kubectl delete deployment node-app-blue -n ${K8S_NAMESPACE} --ignore-not-found"
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline finished."
        }
    }
}